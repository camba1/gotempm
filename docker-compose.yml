version: "3.7"

services:
  pgdb:
    image: postgres
    restart: always
    container_name: pgdb
    env_file: ./postgres/docker-compose.env
    volumes:
      - ./postgres/postgresDB:/var/lib/postgresql/data
      - ./postgres/postgresInit:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
  nats:
    build:
      context: ./nats
      dockerfile: Dockerfile
    ports:
      - "8222:8222"
      - "4222:4222"
      - "6222:6222"
  timescaledb:
    build:
      context: ./timescaledb
      dockerfile: Dockerfile
    restart: always
    container_name: timescaledb
    env_file: ./timescaledb/docker-compose.env
    volumes:
      - ./timescaledb/timescaleDB:/var/lib/postgresql/data
    ports:
      - "5433:5432"
  arangodb:
    image: arangodb:3.6.4
    container_name: arangodbcont
    env_file: ./arangodb/docker-compose.env
    ports:
      - "8529:8529"
    volumes:
      - ./arangodb/db:/var/lib/arangodb3
      - ./arangodb/apps_db_system:/var/lib/arangodb3-apps/_db/
      - ./arangodb/arangodbinit:/docker-entrypoint-initdb.d
  redis:
    image: redis
    container_name: rediscont
    env_file: ./redis/docker-compose.env
    volumes:
    - ./redis/data:/data
    - ./redis/config:/usr/local/etc/redis/
#    command: ["redis-server","/usr/local/etc/redis/redis.conf", "--appendonly", "yes"]
#    command: ["sh", "-c", "redis-server", "--appendonly", "yes", "--requirepass", "$${REDIS_PASS}"]
    entrypoint: ["sh", "-c", "redis-server --appendonly yes --requirepass $${REDIS_PASS}"]
    ports:
      - "6379:6379"
  microserver:
    build:
      context: ./micro
      dockerfile: Dockerfile
    container_name: microservercont
    command: server
    ports:
      - "8080-8081:8080-8081/tcp"
      - "2111-2115:2111-2115/tcp"
    volumes:
    - ./audit:/goTempM/audit
    - ./customer:/goTempM/customer
    - ./globalerrors:/goTempM/globalerrors
    - ./globalMonitoring:/goTempM/globalMonitoring
    - ./globalProtos:/goTempM/globalProtos
    - ./globalUtils:/goTempM/globalUtils
    - ./globalCache:/goTempM/globalCache
    - ./product:/goTempM/product
    - ./promotion:/goTempM/promotion
    - ./user:/goTempM/user
    - ./go.mod:/goTempM/go.mod
    - ./Makefile:/goTempM/Makefile
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: dev
    depends_on:
      - microserver
    container_name: gtweb
    env_file: ./web/docker-compose.env
    volumes:
    - ./web/sapper/src:/goTempM/web/sapper/src
    ports:
    - "3000:3000"
    - "10000:10000"
  prometheus:
    image: prom/prometheus
    depends_on:
      - pgdbexporter
      - redisexporter
      - natsexporter
      - timescaleexporter
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    env_file: ./grafana/docker-compose.env
    ports:
      - "3001:3000"
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
  pgdbexporter:
    image: bitnami/postgres-exporter
    depends_on:
      - pgdb
    env_file: ./prometheus/postgresExporter/docker-compose.env
    ports:
      - "9187:9187"
  redisexporter:
    image: bitnami/redis-exporter
    depends_on:
      - redis
    env_file: ./prometheus/redisExporter/docker-compose.env
    ports:
      - "9121:9121"
  natsexporter:
    image: natsio/prometheus-nats-exporter
    depends_on:
      - nats
    ports:
      - "7777:7777"
    command: [ "-varz", "http://nats:8222" ]
  timescaleexporter:
    image: bitnami/postgres-exporter
    depends_on:
      - timescaledb
    env_file: ./prometheus/timescaledbExporter/docker-compose.env
    ports:
      - "9188:9187"